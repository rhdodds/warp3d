#
# ****************************************************************************
#
#   File: Makefile.windows.nmake
#
#      files: Makewarp_jom.bat or Makewarp.bat invoke this file
#
#   Developer: rdodds
#
#   Last modifications: 9/24/2025 rhd
#
#    Makefile for WARP3D on systems running Windows 10/11
#    on x86 Processors (64-bit mode).
#
#    This nmake script is initiated by the the command shell script
#    Makewarp.bat or Makewarp_jom.bat (which sets the 64-bit
#    mode for use here)
#
#    Tested with:
#         Intel(R) Fortran Intel(R) 64 Compiler Classic for applications running on 
#             Intel(R) 64, Version 2021.13.0 Build 20240602_000000
#
#         Intel MKL 2024.2.0662   
#
#    The generated executable is statically linked to enable use on
#    Windows machines w/o the Intel compiler suite.
#
#     Notes
#
#       1. Key compiler options:
#
#           Intel: by default we use the compiler feature to
#                  build instructions in the executable for all
#                  processor types from ivybridge to current.
#                  During execution the code dispatches the best
#                  instructions for your specific computer.
#
#                  A smaller executable file can be generated using
#                  -xHOST option as offered below
#
#       2. The Pardiso solver package in Intel MKL automatically
#          uses the most efficient instruction set available on
#          your specific computer.
#
# ==>>  3. The distributed executables for WARP3D ** require ** 
#          that your processor support the AVX instruction 
#          set from Intel ivybridge and newer processors
#          (as a minimum).
#
#          These processors became available in early 2011 and include:
#             2nd Generation Intel¨ Coreª i7 Processors
#             2nd Generation Intel¨ Coreª i5 Processors
#             2nd Generation Intel¨ Coreª i3 Processors
#             Intel¨ Xeon¨ Processor E5 Family
#             Intel¨ Xeon¨ Processor E3 Family
#             + all newer processors
#
#           During the next year, we plan to require processors
#           that support the AVX2 instruction set.
#
!IF DEFINED(ARCH64)
XXX = abc
!ELSE
!ERROR *** ARCH64 not defined. makefile processing stopped ****
!ENDIF
#
OSNAME   = Windows
BUILDNUM = 4400
PRE      = fpp
#
ODIR   = .\.\..\obj_windows
EXEDIR = .\..\run_windows
#
EXE_NAME = warp3d.exe
MKLIB    = $(ODIR)
#
F90TRAP    = /ftrapuv /check uninit
F90TRAP    =
INLINEOPT  = /Qinline-factor-
#INLINEOPT = /Ob0   # no inlining
#
PARALLEL   = /Qmkl:parallel /threads /reentrancy /Qopenmp
STACKSIZE  = /F400000000
#
HARDWARE_MACHINE_TYPE = /QxHOST /align:array64byte /Qopt-zmm-usage:high 
#
PART3 = /QaxAVX,CORE-AVX2,COMMON-AVX512 /QxIVYBRIDGE 
PART4 = /Qopt-zmm-usage:high /align:array64byte
ALL_PROCESSORS = $(PART3) $(PART4)
#
MACHINE_TYPE =  $(ALL_PROCESSORS)
#
#     The /Qdiag .. supresses the warning message that Intel
#     Clasic ifort will be discontinued for dowlonding in early 2025.
#
F1 = /fpconstant /fixed /traceback /module:$(ODIR) $(F90TRAP)
F2 = /Qunroll /Qftz /nologo /heap-arrays  /traceback /Qdiag-disable:10448
F3 = $(INLINEOPT) $(MACHINE_TYPE) $(PARALLEL) $(STACKSIZE)
#
F90 = ifort $(F1) $(F2) $(F3)
LINK90 = $(F90)
#
O = .obj
OD = $(ODIR)
RMC = del /q
MVC = move /y
#
#                list module files first for clarity
#
OBJ =	 \
	$(OD)/mod_adaptive_steps$O	 \
	$(OD)/mod_contact$O	 \
	$(OD)/mod_crack_growth$O	 \
	$(OD)/mod_crystals$O   \
	$(OD)/mod_damage$O	 \
	$(OD)/mod_elblk$O	 \
	$(OD)/mod_elem_load$O	 \
	$(OD)/mod_eleblocks$O	 \
	$(OD)/mod_file_info$O	 \
	$(OD)/mod_hypre$O     \
	$(OD)/mod_jintegral$O	 \
	$(OD)/mod_local_stiffness$O \
	$(OD)/mod_main$O	 \
	$(OD)/mod_mpc$O	 \
	$(OD)/mod_mpi_lnpcg$O	 \
	$(OD)/mod_performance$O \
	$(OD)/mod_pconvert$O	 \
	$(OD)/mod_scan$O       \
	$(OD)/mod_segmental_curves$O	 \
	$(OD)/mod_stiffness$O	 \
	$(OD)/mod_trlist$O \
	$(OD)/user_routines_module$O \
	$(OD)/addifv$O	 \
	$(OD)/addmas$O	 \
	$(OD)/adapt_check$O	 \
	$(OD)/allocate_damage$O	 \
	$(OD)/allocate_load$O	 \
	$(OD)/assemble_code$O	 \
	$(OD)/blcmp1$O	 \
	$(OD)/bmod$O	 \
	$(OD)/chkcrack$O	 \
	$(OD)/chkcrack_ctoa$O	 \
	$(OD)/chkcrack_gurson$O	 \
	$(OD)/chkcrack_smcs$O	 \
	$(OD)/chkcrack_cohesive$O	 \
	$(OD)/chk_stp_reduce$O	 \
	$(OD)/chk_stp_reduce_ctoa$O	 \
	$(OD)/chk_stp_reduce_gurson$O	 \
	$(OD)/chk_stp_reduce_smcs$O	 \
	$(OD)/chk_stp_reduce_cohes$O	 \
	$(OD)/cmpmas$O	 \
	$(OD)/cohes_elem$O	 \
	$(OD)/con_dump$O	 \
	$(OD)/contact$O	 \
	$(OD)/comput$O	 \
	$(OD)/cpu_time$O	 \
	$(OD)/cvtest$O	 \
	$(OD)/derivs$O	 \
	$(OD)/didriv$O	 \
	$(OD)/distup$O	 \
	$(OD)/distributed_assembly$O  \
	$(OD)/difrar$O	 \
	$(OD)/di1dsf$O	 \
	$(OD)/dimrot$O	 \
	$(OD)/dicmj$O	 \
	$(OD)/dielem_a$O	 \
	$(OD)/dielem_b$O	 \
	$(OD)/dielem_c$O	 \
	$(OD)/drive_assemble_solve$O	 \
	$(OD)/drive_pardiso$O	 \
	$(OD)/drive_pardiso_asym$O	 \
	$(OD)/diexp4$O	 \
	$(OD)/dptstf$O	 \
	$(OD)/drive_eps_sig_internal_forces$O	 \
	$(OD)/dupmas$O	 \
	$(OD)/dupstr$O	 \
	$(OD)/elmas1$O	 \
	$(OD)/elem_load_a$O	 \
	$(OD)/elem_load_b$O	 \
	$(OD)/elem_load_c$O	 \
	$(OD)/elprp$O	 \
	$(OD)/energy$O	 \
	$(OD)/eqivld$O	 \
	$(OD)/errchk$O	 \
	$(OD)/errmsg$O	 \
	$(OD)/find_neighbors$O	 \
	$(OD)/gatemps$O	 \
	$(OD)/get_edest$O	 \
	$(OD)/growth_loads$O	 \
	$(OD)/gp_temp_eps$O	 \
	$(OD)/gpifv1$O	 \
	$(OD)/gpmas1$O	 \
	$(OD)/gptns1$O	 \
	$(OD)/gtlsn1$O	 \
	$(OD)/gtmat1$O	 \
	$(OD)/hypre$O		 \
	$(OD)/incomp$O	 \
	$(OD)/inclmass$O	 \
	$(OD)/incontact$O	 \
	$(OD)/incon$O	 \
	$(OD)/incoor$O	 \
	$(OD)/incrystal$O \
	$(OD)/insurf$O	 \
	$(OD)/intied$O	 \
	$(OD)/indypm$O	 \
	$(OD)/inelbk$O	 \
	$(OD)/inelem$O	 \
	$(OD)/infile$O	 \
	$(OD)/incurv$O	 \
	$(OD)/indom$O	 \
	$(OD)/inalpha$O	 \
	$(OD)/incrack$O	 \
	$(OD)/infgm$O	 \
	$(OD)/inicon$O	 \
	$(OD)/ininc$O	 \
	$(OD)/initdm$O	 \
	$(OD)/initst$O	 \
	$(OD)/inlod$O	 \
	$(OD)/inmat$O	 \
	$(OD)/innum$O	 \
	$(OD)/inpatch$O  \
	$(OD)/intab$O	 \
	$(OD)/iodevn$O	 \
	$(OD)/kg1$O	 \
	$(OD)/license$O	 \
	$(OD)/linked_list$O	 \
	$(OD)/main_program$O	 \
	$(OD)/mnralg$O	 \
	$(OD)/mem_allocate$O	 \
	$(OD)/mm01$O	 \
	$(OD)/mm02$O	 \
	$(OD)/mm03$O	 \
	$(OD)/mm04$O	 \
	$(OD)/mm05$O	 \
	$(OD)/mm06$O	 \
	$(OD)/mm07$O	 \
	$(OD)/mm08$O	 \
	$(OD)/mm09$O	 \
	$(OD)/mm10_a$O	 \
	$(OD)/mm10_b$O	 \
	$(OD)/mm10_c$O	 \
	$(OD)/mm10_d$O	 \
	$(OD)/mm10_e$O	 \
	$(OD)/mm10_e$O	 \
	$(OD)/mm10_f$O	 \
	$(OD)/mm11$O  \
	$(OD)/mmnoopt$O	 \
	$(OD)/mm_return_values$O	 \
	$(OD)/mpi_code$O	 \
	$(OD)/mpi_handle_slaves$O \
	$(OD)/mpc_modify$O	 \
	$(OD)/name_strip$O	 \
	$(OD)/ndpts1$O	 \
	$(OD)/ouddpa$O	 \
	$(OD)/oudriv$O	 \
	$(OD)/oudups$O	 \
	$(OD)/oudva$O	 \
	$(OD)/ouext1$O	 \
	$(OD)/ouext2$O	 \
	$(OD)/ouflnm$O	 \
	$(OD)/ougts1$O	 \
	$(OD)/ouhdva$O	 \
	$(OD)/ouhel$O	 \
	$(OD)/ouhnod$O	 \
	$(OD)/ouhprn$O	 \
	$(OD)/ouhrks$O	 \
	$(OD)/ouhstr$O	 \
	$(OD)/oulbdd$O	 \
	$(OD)/oulbir$O	 \
	$(OD)/oulbst$O	 \
	$(OD)/oulg1$O	 \
	$(OD)/oumkcv$O	 \
	$(OD)/oundhd$O	 \
	$(OD)/ounds1$O	 \
	$(OD)/ouocdd$O	 \
	$(OD)/ouocst$O	 \
	$(OD)/ouneut$O	 \
	$(OD)/ouocst_elem$O	 \
	$(OD)/oupdva$O	 \
	$(OD)/oupele$O	 \
	$(OD)/ouprks$O	 \
	$(OD)/oupstr_elem$O	 \
	$(OD)/oupstr_node$O	 \
	$(OD)/oures$O	 \
	$(OD)/ourlhd$O	 \
	$(OD)/ousthd$O	 \
	$(OD)/oust_elem$O	 \
	$(OD)/oustates$O	 \
	$(OD)/outfil$O	 \
	$(OD)/oustr$O	 \
	$(OD)/outime$O	 \
	$(OD)/packets$O	 \
	$(OD)/pconvert$O	 \
	$(OD)/prcsel$O	 \
	$(OD)/qmply1$O	 \
	$(OD)/getgpts$O	 \
	$(OD)/read_damage$O	 \
	$(OD)/read_write$O	 \
	$(OD)/reopen$O	 \
	$(OD)/rknifv$O	 \
	$(OD)/rknmas$O	 \
	$(OD)/rknstr$O	 \
	$(OD)/rktstf$O	 \
	$(OD)/rplstr$O	 \
	$(OD)/rscmp1$O	 \
	$(OD)/rstgp1$O	 \
	$(OD)/scan$O	 \
	$(OD)/scstr$O	 \
	$(OD)/setelb$O	 \
	$(OD)/setup$O	 \
	$(OD)/shapef$O	 \
	$(OD)/setup_mat_props$O	 \
	$(OD)/splunj$O	 \
	$(OD)/statistics$O	 \
	$(OD)/steptime$O   \
	$(OD)/store$O	 \
	$(OD)/stpdrv$O	 \
	$(OD)/star_com$O	 \
	$(OD)/tanstf$O	 \
	$(OD)/temsto$O	 \
	$(OD)/thyme$O	 \
	$(OD)/trnvec$O	 \
	$(OD)/trnmtx$O	 \
	$(OD)/tied_mesh_a$O	 \
	$(OD)/tied_mesh_b$O	 \
	$(OD)/tied_mesh_c$O	 \
	$(OD)/tilde$O	 \
	$(OD)/update$O	 \
	$(OD)/uppbar$O	 \
	$(OD)/upres$O	 \
	$(OD)/user_list$O	 \
	$(OD)/user_routines_umat$O	 \
	$(OD)/user_routines_other_Abaqus$O \
	$(OD)/user_routines_warp3d$O	 \
	$(OD)/user_routines_support$O	 \
	$(OD)/vol_terms$O	 \
	$(OD)/vol_avg$O	 \
	$(OD)/zero_vector$O	 \
	$(OD)/zero_vol$O	 \
#

$(EXE_NAME) : $(OBJ)
	$(LINK90) /Od  $(OBJ) $(LOPT) /o $@
	$(MVC) $@ $(EXEDIR)\$@
#
$(OD)/addifv$O : addifv.f param_def \
                  $(OD)/mod_damage$O $(OD)/mod_crack_growth$O
	$(F90) /O3 /Qip  /c addifv.f
	$(MVC) addifv$O $@

$(OD)/adapt_check$O : adapt_check.f $(OD)/mod_adaptive_steps$O
	$(F90) /O3 /Qip  /c adapt_check.f
	$(MVC) adapt_check$O $@

$(OD)/addmas$O : addmas.f param_def
	$(F90) /O3 /Qip  /c addmas.f
	$(MVC) addmas$O $@

$(OD)/allocate_damage$O : allocate_damage.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O param_def \
                   $(OD)/mod_damage$O 
	$(F90) /O3 /Qip  /c allocate_damage.f
	$(MVC) allocate_damage$O $@

$(OD)/allocate_load$O : allocate_load.f $(OD)/mod_elem_load$O \
                   $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip  /c allocate_load.f
	$(MVC) allocate_load$O $@

$(OD)/assemble_code$O : assemble_code.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c assemble_code.f
	$(MVC) assemble_code$O $@
#
#       --- b --
#
$(OD)/blcmp1$O : blcmp1.f param_def
	$(F90) /O3 /Qip  /c blcmp1.f
	$(MVC) blcmp1$O $@

$(OD)/bmod$O : bmod.f
	$(F90) /O3 /Qip  /c bmod.f
	$(MVC) bmod$O $@

$(OD)/bscmp1$O : bscmp1.f param_def
	$(F90) /O3 /Qip  /c bscmp1.f
	$(MVC) bscmp1$O $@

$(OD)/btcmp1$O : btcmp1.f param_def
	$(F90) /O3 /Qip  /c btcmp1.f
	$(MVC) btcmp1$O $@
#
#       --- c --
#
$(OD)/chkcrack$O : chkcrack.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chkcrack.f
	$(MVC) chkcrack$O $@

$(OD)/chkcrack_ctoa$O : chkcrack_ctoa.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def  $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chkcrack_ctoa.f
	$(MVC) chkcrack_ctoa$O $@

$(OD)/chkcrack_gurson$O : chkcrack_gurson.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chkcrack_gurson.f
	$(MVC) chkcrack_gurson$O $@

$(OD)/chkcrack_smcs$O : chkcrack_smcs.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chkcrack_smcs.f
	$(MVC) chkcrack_smcs$O $@

$(OD)/chkcrack_cohesive$O : chkcrack_cohesive.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chkcrack_cohesive.f
	$(MVC) chkcrack_cohesive$O $@

$(OD)/chk_stp_reduce$O : chk_stp_reduce.f  \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chk_stp_reduce.f
	$(MVC) chk_stp_reduce$O $@

$(OD)/chk_stp_reduce_ctoa$O : chk_stp_reduce_ctoa.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c chk_stp_reduce_ctoa.f
	$(MVC) chk_stp_reduce_ctoa$O $@

$(OD)/chk_stp_reduce_gurson$O : chk_stp_reduce_gurson.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def
	$(F90) /O3 /Qip  /c chk_stp_reduce_gurson.f
	$(MVC) chk_stp_reduce_gurson$O $@

$(OD)/chk_stp_reduce_smcs$O : chk_stp_reduce_smcs.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def
	$(F90) /O3 /Qip  /c chk_stp_reduce_smcs.f
	$(MVC) chk_stp_reduce_smcs$O $@

$(OD)/chk_stp_reduce_cohes$O : chk_stp_reduce_cohes.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_main$O $(OD)/mod_damage$O \
                   param_def
	$(F90) /O3 /Qip  /c chk_stp_reduce_cohes.f
	$(MVC) chk_stp_reduce_cohes$O $@

$(OD)/cmpmas$O : cmpmas.f $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O param_def \
                   $(OD)/mod_main$O $(OD)/mod_mpi_lnpcg$O
	$(F90) /O3 /Qip  /c cmpmas.f
	$(MVC) cmpmas$O $@

$(OD)/cohes_elem$O : cohes_elem.f param_def
	$(F90) /O3 /Qip  /c cohes_elem.f
	$(MVC) cohes_elem$O $@

$(OD)/comput$O : comput.f $(OD)/mod_main$O $(OD)/mod_trlist$O \
                   param_def $(OD)/mod_jintegral$O
	$(F90) /O3 /Qip  /c comput.f
	$(MVC) comput$O $@

$(OD)/con_dump$O : con_dump.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_mpc$O
	$(F90) /O3 /Qip  /c con_dump.f
	$(MVC) con_dump$O $@

$(OD)/contact$O : contact.f $(OD)/mod_main$O \
                   $(OD)/mod_contact$O param_def \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c contact.f
	$(MVC) contact$O $@

$(OD)/cpu_time$O : cpu_time.f  $(OD)/mod_performance$O
	$(F90) /O3 /Qip  /c cpu_time.f
	$(MVC) cpu_time$O $@

$(OD)/cvtest$O : cvtest.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c cvtest.f
	$(MVC) cvtest$O $@
#
#       --- d --
#
$(OD)/derivs$O : derivs.f
	$(F90) /O3 /Qip  /c derivs.f
	$(MVC) derivs$O $@

$(OD)/drive_assemble_solve$O : drive_assemble_solve.f param_def \
                   $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O $(OD)/mod_mpc$O \
                   $(OD)/mod_stiffness$O  $(OD)/mod_hypre$O \
                   $(OD)/mod_local_stiffness$O $(OD)/distributed_assembly$O \
                   $(OD)/mod_performance$O
	$(F90) /O3 /Qip  /c drive_assemble_solve.f
	$(MVC) drive_assemble_solve$O $@

$(OD)/drive_pardiso$O : drive_pardiso.f
	$(F90) /O3 /Qip  /c drive_pardiso.f
	$(MVC) drive_pardiso$O $@
	
$(OD)/drive_pardiso_asym$O : drive_pardiso_asym.f
	$(F90) /O3 /Qip  /c drive_pardiso_asym.f
	$(MVC) drive_pardiso_asym$O $@

$(OD)/distributed_assembly$O : distributed_assembly.f \
                                 $(OD)/mod_local_stiffness$O  \
                                 param_def
	$(F90) /O3 /Qip /c distributed_assembly.f
	$(MVC) distributed_assembly$O $@

$(OD)/didriv$O : didriv.f $(OD)/mod_main$O  $(OD)/mod_segmental_curves$O \
                   param_def $(OD)/mod_jintegral$O \
                   $(OD)/mod_main$O $(OD)/mod_eleblocks$O
	$(F90) /O3 /c didriv.f
	$(MVC) didriv$O $@

$(OD)/diexp4$O : diexp4.f param_def \
                   $(OD)/mod_jintegral$O $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c diexp4.f
	$(MVC) diexp4$O $@

$(OD)/distup$O : distup.f $(OD)/mod_jintegral$O
	$(F90) /O3 /Qip  /c distup.f
	$(MVC) distup$O $@

$(OD)/difrar$O : difrar.f $(OD)/mod_jintegral$O
	$(F90) /O3 /Qip  /c difrar.f
	$(MVC) difrar$O $@

$(OD)/di1dsf$O : di1dsf.f
	$(F90) /O3 /Qip  /c di1dsf.f
	$(MVC) di1dsf$O $@

$(OD)/dimrot$O : dimrot.f $(OD)/mod_main$O \
                   $(OD)/mod_main$O $(OD)/mod_jintegral$O \
                   param_def
	$(F90) /O3 /Qip  /c dimrot.f
	$(MVC) dimrot$O $@

#
$(OD)/dicmj$O : dicmj.f param_def \
                   $(OD)/mod_jintegral$O $(OD)/mod_main$O \
                   $(OD)/mod_main$O $(OD)/mod_eleblocks$O
	$(F90) /O3 /Qip /c dicmj.f
	$(MVC) dicmj$O $@

$(OD)/dielem_a$O : dielem_a.f
	$(F90) /O3 /Qip  /c dielem_a.f
	$(MVC) dielem_a$O $@

$(OD)/dielem_b$O : dielem_b.f
	$(F90) /O3 /Qip  /c dielem_b.f
	$(MVC) dielem_b$O $@

$(OD)/dielem_c$O : dielem_c.f
	$(F90) /O3 /Qip  /c dielem_c.f
	$(MVC) dielem_c$O $@

$(OD)/dptstf$O : dptstf.f $(OD)/mod_main$O \
                   param_def  $(OD)/mod_damage$O \
                   $(OD)/mod_crack_growth$O
	$(F90) /O3 /Qip  /c dptstf.f
	$(MVC) dptstf$O $@

$(OD)/drive_eps_sig_internal_forces$O : drive_eps_sig_internal_forces.f \
                   $(OD)/mod_crack_growth$O $(OD)/mod_damage$O $(OD)/mod_main$O \
                   param_def include_sig_up \
                   $(OD)/mod_eleblocks$O $(OD)/mod_main$O \
                   $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c drive_eps_sig_internal_forces.f
	$(MVC) drive_eps_sig_internal_forces$O $@


$(OD)/dupmas$O : dupmas.f
	$(F90) /O3 /Qip  /c dupmas.f
	$(MVC) dupmas$O $@

$(OD)/dupstr$O : dupstr.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_damage$O \
                   $(OD)/mod_crack_growth$O
	$(F90) /O3 /Qip  /c dupstr.f
	$(MVC) dupstr$O $@
#
#       --- e --
#
$(OD)/elem_load_a$O : elem_load_a.f $(OD)/mod_main$O \
                   $(OD)/mod_elem_load$O param_def
	$(F90) /O3 /Qip  /c elem_load_a.f
	$(MVC) elem_load_a$O $@

$(OD)/elem_load_b$O : elem_load_b.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c elem_load_b.f
	$(MVC) elem_load_b$O $@

$(OD)/elem_load_c$O : elem_load_c.f  $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c elem_load_c.f
	$(MVC) elem_load_c$O $@

$(OD)/elmas1$O : elmas1.f param_def
	$(F90) /O3 /Qip  /c elmas1.f
	$(MVC) elmas1$O $@

$(OD)/elprp$O : elprp.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c elprp.f
	$(MVC) elprp$O $@

$(OD)/energy$O : energy.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c energy.f
	$(MVC) energy$O $@

$(OD)/eqivld$O : eqivld.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c eqivld.f
	$(MVC) eqivld$O $@


$(OD)/errchk$O : errchk.f param_def $(OD)/mod_main$O \
                   $(OD)/mod_crystals$O $(OD)/mod_damage$O \
                   $(OD)/mod_contact$O $(OD)/mod_main$O \
                   $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c errchk.f
	$(MVC) errchk$O $@

$(OD)/errmsg$O : errmsg.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c errmsg.f
	$(MVC) errmsg$O $@

$(OD)/evcmp1$O : evcmp1.f param_def
	$(F90) /O3 /Qip  /c evcmp1.f
	$(MVC) evcmp1$O $@
#
#       --- f --
#
$(OD)/find_neighbors$O : find_neighbors.f param_def \
                   $(OD)/mod_main$O $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c find_neighbors.f
	$(MVC) find_neighbors$O $@
#
#       --- g --
#
$(OD)/gastr$O : gastr.f param_def
	$(F90) /O3 /Qip  /c gastr.f
	$(MVC) gastr$O $@

$(OD)/gatemps$O : gatemps.f
	$(F90) /O3 /Qip  /c gatemps.f
	$(MVC) gatemps$O $@

$(OD)/get_edest$O : get_edest.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_eleblocks$O
	$(F90) /O3 /Qip  /c get_edest.f
	$(MVC) get_edest$O $@

$(OD)/getgpts$O : getgpts.f
	$(F90) /O3 /Qip  /c getgpts.f
	$(MVC) getgpts$O $@

$(OD)/gp_temp_eps$O : gp_temp_eps.f param_def
	$(F90) /O3 /Qip  /c gp_temp_eps.f
	$(MVC) gp_temp_eps$O $@

$(OD)/gpifv1$O : gpifv1.f param_def \
                   include_sig_up $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c gpifv1.f
	$(MVC) gpifv1$O $@

$(OD)/gpmas1$O : gpmas1.f param_def
	$(F90) /O3 /Qip  /c gpmas1.f
	$(MVC) gpmas1$O $@

$(OD)/gptns1$O : gptns1.f include_tan_ek $(OD)/mod_crystals$O \
                   param_def $(OD)/mod_main$O $(OD)/mod_eleblocks$O
	$(F90) /O3 /Qip  /c gptns1.f
	$(MVC) gptns1$O $@

$(OD)/growth_loads$O : growth_loads.f $(OD)/mod_crack_growth$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_damage$O $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c growth_loads.f
	$(MVC) growth_loads$O $@

$(OD)/gtlsn1$O : gtlsn1.f param_def
	$(F90) /O3 /Qip  /c gtlsn1.f
	$(MVC) gtlsn1$O $@

$(OD)/gtmat1$O : gtmat1.f param_def
	$(F90) /O3 /Qip  /c gtmat1.f
	$(MVC) gtmat1$O $@
#
#       --- h --
#
$(OD)/hypre$O : iterative_sparse_hypre.f  $(OD)/mod_main$O param_def \
                $(OD)/mod_hypre$O $(OD)/distributed_assembly$O \
                $(OD)/mod_local_stiffness$O
	$(F90) /O3 /Qip /c iterative_sparse_hypre.f /o hypre$O
	$(MVC) hypre$O $@
#
#       --- i --
#
$(OD)/inclmass$O : inclmass.f $(OD)/mod_eleblocks$O \
                   $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip  /c inclmass.f
	$(MVC) inclmass$O $@

$(OD)/inalpha$O : inalpha.f $(OD)/mod_main$O $(OD)/mod_trlist$O \
                   param_def
	$(F90) /O3 /Qip  /c inalpha.f
	$(MVC) inalpha$O $@

$(OD)/incomp$O : incomp.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_mpc$O $(OD)/mod_contact$O
	$(F90) /O3 /Qip  /c incomp.f
	$(MVC) incomp$O $@

$(OD)/incon$O : incon.f $(OD)/mod_main$O $(OD)/mod_trlist$O \
                   param_def $(OD)/mod_damage$O \
                   $(OD)/mod_main$O $(OD)/mod_mpc$O
	$(F90) /O3 /Qip  /c incon.f
	$(MVC) incon$O $@

$(OD)/insurf$O : insurf.f $(OD)/mod_mpc$O $(OD)/mod_trlist$O \
                   $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip  /c insurf.f
	$(MVC) insurf$O $@

$(OD)/intied$O : intied.f $(OD)/mod_mpc$O \
                   $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip  /c intied.f
	$(MVC) intied$O $@

$(OD)/incontact$O : incontact.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_contact$O
	$(F90) /O3 /Qip  /c incontact.f
	$(MVC) incontact$O $@

$(OD)/incoor$O : incoor.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c incoor.f
	$(MVC) incoor$O $@

$(OD)/incrystal$O : incrystal.f param_def $(OD)/mod_main$O \
                    $(OD)/mod_crystals$O $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c incrystal.f
	$(MVC) incrystal$O $@

$(OD)/incrack$O : incrack.f $(OD)/mod_crack_growth$O  \
                   $(OD)/mod_damage$O $(OD)/mod_main$O \
                   param_def $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c incrack.f
	$(MVC) incrack$O $@

$(OD)/infgm$O : infgm.f $(OD)/mod_main$O  $(OD)/mod_trlist$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c infgm.f
	$(MVC) infgm$O $@

$(OD)/incurv$O : incurv.f param_def \
                   $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c incurv.f
	$(MVC) incurv$O $@

$(OD)/indom$O : indom.f $(OD)/mod_main$O $(OD)/mod_trlist$O \
                   param_def $(OD)/mod_jintegral$O
	$(F90) /O3 /Qip  /c indom.f
	$(MVC) indom$O $@

$(OD)/indypm$O : indypm.f param_def $(OD)/mod_main$O \
                 $(OD)/mod_performance$O $(OD)/distributed_assembly$O\
                 $(OD)/mod_main$O $(OD)/mod_damage$O \
                 $(OD)/mod_mpc$O  $(OD)/mod_hypre$O
	$(F90) /O3 /Qip  /c indypm.f
	$(MVC) indypm$O $@

$(OD)/inelbk$O : inelbk.f param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c inelbk.f
	$(MVC) inelbk$O $@

$(OD)/inelem$O : inelem.f param_def $(OD)/mod_main$O $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c inelem.f
	$(MVC) inelem$O $@

$(OD)/infile$O : infile.f $(OD)/mod_file_info$O \
                   $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip  /c infile.f
	$(MVC) infile$O $@

$(OD)/inicon$O : inicon.f $(OD)/mod_main$O $(OD)/mod_trlist$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c inicon.f
	$(MVC) inicon$O $@

$(OD)/ininc$O : ininc.f $(OD)/mod_main$O \
                   param_def  $(OD)/mod_trlist$O 
	$(F90) /O3 /Qip  /c ininc.f
	$(MVC) ininc$O $@

$(OD)/initst$O : initst.f param_def $(OD)/mod_main$O \
                 $(OD)/mod_damage$O $(OD)/mod_file_info$O \
                 $(OD)/mod_contact$O $(OD)/mod_crystals$O \
                 $(OD)/mod_elem_load$O $(OD)/mod_stiffness$O \
                 $(OD)/mod_main$O $(OD)/distributed_assembly$O \
                 $(OD)/mod_segmental_curves$O $(OD)/mod_hypre$O \
                 $(OD)/mod_performance$O
	$(F90) /O3 /Qip  /c initst.f
	$(MVC) initst$O $@

$(OD)/initdm$O : initdm.f $(OD)/mod_jintegral$O
	$(F90) /O3 /Qip  /c initdm.f
	$(MVC) initdm$O $@

$(OD)/inlod$O : inlod.f $(OD)/mod_elem_load$O $(OD)/mod_trlist$O \
                   $(OD)/mod_main$O param_def \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c inlod.f
	$(MVC) inlod$O $@

$(OD)/inmat$O : inmat.f $(OD)/mod_main$O $(OD)/mod_trlist$O \
                   param_def $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c inmat.f
	$(MVC) inmat$O $@

$(OD)/innum$O : innum.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c innum.f
	$(MVC) innum$O $@

$(OD)/inpatch$O : inpatch.f $(OD)/mod_main$O \
                   param_def 
	$(F90) /O3 /Qip  /c inpatch.f
	$(MVC) inpatch$O $@

$(OD)/intab$O : intab.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c intab.f
	$(MVC) intab$O $@

$(OD)/iodevn$O : iodevn.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c iodevn.f
	$(MVC) iodevn$O $@
#
#       --- k --
#
$(OD)/kg1$O : kg1.f param_def
	$(F90) /O3 /Qip  /c kg1.f
	$(MVC) kg1$O $@
#
#       --- l --
#
$(OD)/license$O : license.f param_def \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c license.f
	$(MVC) license$O $@

$(OD)/linked_list$O : linked_list.f $(OD)/mod_crack_growth$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_damage$O
	$(F90) /O3 /Qip  /c linked_list.f
	$(MVC) linked_list$O $@
#
#       --- m --
#
$(OD)/main_program$O : main_program.f param_def $(OD)/mod_main$O $(OD)/mod_main$O \
                 $(OD)/mod_file_info$O \
                 $(OD)/mod_performance$O
	$(F90) /D$(OSNAME) /DBuild=$(BUILDNUM) /$(PRE) /O3 /Qip  /c main_program.f
	$(MVC) main_program$O $@

$(OD)/mem_allocate$O : mem_allocate.f $(OD)/mod_main$O \
                   $(OD)/mod_contact$O \
                   $(OD)/mod_main$O param_def \
                   $(OD)/mod_mpi_lnpcg$O
	$(F90) /O3 /Qip  /c mem_allocate.f
	$(MVC) mem_allocate$O $@

$(OD)/mm01$O : mm01.f param_def
	$(F90) /O3 /Qip /Ob1 /c mm01.f
	$(MVC) mm01$O $@

$(OD)/mm02$O : mm02.f param_def
	$(F90) /O3 /Qip  /c mm02.f
	$(MVC) mm02$O $@

$(OD)/mm03$O : mm03.f
	$(F90) /O3 /Qip  /c mm03.f
	$(MVC) mm03$O $@

$(OD)/mm03p$O : mm03p.f param_def \
                   $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c mm03p.f
	$(MVC) mm03p$O $@

$(OD)/mm04$O : mm04.f param_def
	$(F90) /O3 /Qip   /c mm04.f
	$(MVC) mm04$O $@

$(OD)/mm05$O : mm05.f
	$(F90) /O3 /Qip  /c mm05.f
	$(MVC) mm05$O $@

$(OD)/mm06$O : mm06.f
	$(F90) /O3 /Qip  /c mm06.f
	$(MVC) mm06$O $@

$(OD)/mm07$O : mm07.f
	$(F90) /O3 /Qip  /c mm07.f
	$(MVC) mm07$O $@

$(OD)/mm08$O : mm08.f
	$(F90) /O3 /Qip  /c mm08.f
	$(MVC) mm08$O $@

$(OD)/mm09$O : mm09.f
	$(F90) /O3 /Qip  /c mm09.f
	$(MVC) mm09$O $@

$(OD)/mm10_a$O : mm10_a.f $(OD)/mod_crystals$O param_def include_mm10
	$(F90) /O3 /Qip /c mm10_a.f
	$(MVC) mm10_a$O $@

$(OD)/mm10_b$O : mm10_b.f $(OD)/mod_crystals$O param_def include_mm10
	$(F90) /O3  /Qinline-factor:1 /Qip  /c mm10_b.f
	$(MVC) mm10_b$O $@

$(OD)/mm10_c$O : mm10_c.f $(OD)/mod_crystals$O param_def include_mm10
	$(F90) /O3 /Qip /c mm10_c.f
	$(MVC) mm10_c$O $@

$(OD)/mm10_d$O : mm10_d.f $(OD)/mod_crystals$O param_def include_mm10
	$(F90) /O3 /Qip /c mm10_d.f
	$(MVC) mm10_d$O $@

$(OD)/mm10_e$O : mm10_e.f $(OD)/mod_crystals$O param_def include_mm10
	$(F90) /O3 /Qip /c mm10_e.f
	$(MVC) mm10_e$O $@

$(OD)/mm10_f$O : mm10_f.f $(OD)/mod_crystals$O param_def include_mm10
	$(F90) /O3 /Qip /c mm10_f.f
	$(MVC) mm10_f$O $@

$(OD)/mm11$O : mm11.f $(OD)/mod_crystals$O param_def
	$(F90) /O3 /Qip  /c mm11.f
	$(MVC) mm11$O $@

$(OD)/mmnoopt$O : mmnoopt.f $(OD)/mod_crystals$O param_def
	$(F90) /O3 /Qip  /c mmnoopt.f
	$(MVC) mmnoopt$O $@
	
$(OD)/mm_return_values$O : mm_return_values.f 
	$(F90) /O3 /Qip  /c mm_return_values.f
	$(MVC) mm_return_values$O $@

$(OD)/mnralg$O : mnralg.f param_def $(OD)/mod_main$O \
                 $(OD)/mod_adaptive_steps$O $(OD)/distributed_assembly$O\
                 $(OD)/mod_stiffness$O $(OD)/mod_mpc$O $(OD)/mod_performance$O \
                 $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                 $(OD)/mod_hypre$O $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c mnralg.f
	$(MVC) mnralg$O $@

$(OD)/mpc_modify$O : mpc_modify.f $(OD)/mod_stiffness$O \
                   $(OD)/mod_mpc$O $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c mpc_modify.f
	$(MVC) mpc_modify$O $@

$(OD)/mpi_code$O : mpi_code.f param_def $(OD)/mod_main$O $(OD)/mod_damage$O \
                   $(OD)/mod_adaptive_steps$O $(OD)/mod_mpi_lnpcg$O \
                   $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                   $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_crack_growth$O $(OD)/mod_jintegral$O \
                   $(OD)/mod_contact$O $(OD)/mod_crystals$O
	$(F90) /O3 /Qip  /c mpi_code.f
	$(MVC) mpi_code$O $@

$(OD)/mpi_handle_slaves$O : mpi_handle_slaves.f $(OD)/mod_damage$O \
                   $(OD)/mod_adaptive_steps$O $(OD)/mod_mpi_lnpcg$O \
                   $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                   $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_crack_growth$O $(OD)/mod_jintegral$O \
                   $(OD)/mod_main$O param_def \
                   $(OD)/mod_contact$O mpi_code.f
	$(F90) /Od /Qip  /c mpi_handle_slaves.f
	$(MVC) mpi_handle_slaves$O $@

#
#       --- n --
#
$(OD)/name_strip$O : name_strip.f
	$(F90) /O3 /Qip  /c name_strip.f
	$(MVC) name_strip$O $@

$(OD)/ndpts1$O : ndpts1.f
	$(F90) /O3 /Qip  /c ndpts1.f
	$(MVC) ndpts1$O $@

$(OD)/newmrk$O : newmrk.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c newmrk.f
	$(MVC) newmrk$O $@
#
#       --- o --
#

$(OD)/ouddpa$O : ouddpa.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c ouddpa.f
	$(MVC) ouddpa$O $@

$(OD)/oudriv$O : oudriv.f $(OD)/mod_main$O $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c oudriv.f
	$(MVC) oudriv$O $@

$(OD)/oudups$O : oudups.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_eleblocks$O $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c oudups.f
	$(MVC) oudups$O $@

$(OD)/oudva$O : oudva.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c oudva.f
	$(MVC) oudva$O $@

$(OD)/ouext1$O : ouext1.f $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c ouext1.f
	$(MVC) ouext1$O $@

$(OD)/ouext2$O : ouext2.f
	$(F90) /O3 /Qip  /c ouext2.f
	$(MVC) ouext2$O $@

$(OD)/ouflnm$O : ouflnm.f
	$(F90) /O3 /Qip  /c ouflnm.f
	$(MVC) ouflnm$O $@

$(OD)/ougts1$O : ougts1.f param_def \
                   $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c ougts1.f
	$(MVC) ougts1$O $@

$(OD)/ouhdva$O : ouhdva.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c ouhdva.f
	$(MVC) ouhdva$O $@

$(OD)/ouhel$O : ouhel.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c ouhel.f
	$(MVC) ouhel$O $@

$(OD)/ouhnod$O : ouhnod.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c ouhnod.f
	$(MVC) ouhnod$O $@

$(OD)/ouhprn$O : ouhprn.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c ouhprn.f
	$(MVC) ouhprn$O $@

$(OD)/ouhrks$O : ouhrks.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c ouhrks.f
	$(MVC) ouhrks$O $@

$(OD)/ouhstr$O : ouhstr.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c ouhstr.f
	$(MVC) ouhstr$O $@

$(OD)/oulbdd$O : oulbdd.f
	$(F90) /O3 /Qip  /c oulbdd.f
	$(MVC) oulbdd$O $@

$(OD)/oulbir$O : oulbir.f
	$(F90) /O3 /Qip  /c oulbir.f
	$(MVC) oulbir$O $@

$(OD)/oulbst$O : oulbst.f
	$(F90) /O3 /Qip  /c oulbst.f
	$(MVC) oulbst$O $@

$(OD)/oulg1$O : oulg1.f
	$(F90) /O3 /Qip  /c oulg1.f
	$(MVC) oulg1$O $@

$(OD)/oumkcv$O : oumkcv.f param_def \
                   $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c oumkcv.f
	$(MVC) oumkcv$O $@

$(OD)/oundhd$O : oundhd.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c oundhd.f
	$(MVC) oundhd$O $@

$(OD)/ounds1$O : ounds1.f param_def \
                   $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c ounds1.f
	$(MVC) ounds1$O $@

$(OD)/ouneut$O : ouneut.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c ouneut.f
	$(MVC) ouneut$O $@

$(OD)/ouocdd$O : ouocdd.f
	$(F90) /O3 /Qip  /c ouocdd.f
	$(MVC) ouocdd$O $@

$(OD)/ouocst$O : ouocst.f
	$(F90) /O3 /Qip  /c ouocst.f
	$(MVC) ouocst$O $@

$(OD)/ouocst_elem$O : ouocst_elem.f
	$(F90) /O3 /Qip  /c ouocst_elem.f
	$(MVC) ouocst_elem$O $@

$(OD)/oupads$O : oupads.f param_def \
                   $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c oupads.f
	$(MVC) oupads$O $@

$(OD)/oupele$O : oupele.f param_def \
                   $(OD)/mod_elblk$O
	$(F90) /O3 /Qip  /c oupele.f
	$(MVC) oupele$O $@

$(OD)/oupdva$O : oupdva.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c oupdva.f
	$(MVC) oupdva$O $@

$(OD)/ouprks$O : ouprks.f
	$(F90) /O3 /Qip  /c ouprks.f
	$(MVC) ouprks$O $@

$(OD)/oupstr_elem$O : oupstr_elem.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c oupstr_elem.f
	$(MVC) oupstr_elem$O $@

$(OD)/oupstr_node$O : oupstr_node.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c oupstr_node.f
	$(MVC) oupstr_node$O $@

$(OD)/oures$O : oures.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c oures.f
	$(MVC) oures$O $@

$(OD)/ourlhd$O : ourlhd.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c ourlhd.f
	$(MVC) ourlhd$O $@

$(OD)/ousthd$O : ousthd.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c ousthd.f
	$(MVC) ousthd$O $@

$(OD)/oustpa$O : oustpa.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c oustpa.f
	$(MVC) oustpa$O $@

$(OD)/oust_elem$O : oust_elem.f param_def $(OD)/mod_main$O \
                   $(OD)/mod_crystals$O
	$(F90) /O3 /Qip  /c oust_elem.f
	$(MVC) oust_elem$O $@

$(OD)/oustates$O : oustates.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_eleblocks$O $(OD)/mod_elblk$O \
                   $(OD)/mod_crystals$O
	$(F90) /O3 /Qip  /c oustates.f
	$(MVC) oustates$O $@

$(OD)/oustr$O : oustr.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_elblk$O \
                   $(OD)/mod_eleblocks$O $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c oustr.f
	$(MVC) oustr$O $@

$(OD)/outime$O : outime.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c outime.f
	$(MVC) outime$O $@

$(OD)/outfil$O : outfil.f $(OD)/mod_file_info$O \
                   $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip  /c outfil.f
	$(MVC) outfil$O $@

#
#       --- p --
#
$(OD)/packets$O : packets.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c packets.f
	$(MVC) packets$O $@

$(OD)/pconvert$O : pconvert.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                          $(OD)/mod_pconvert$O
	$(F90) /O3 /Qip  /c pconvert.f
	$(MVC) pconvert$O $@

$(OD)/prcsel$O : prcsel.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c prcsel.f
	$(MVC) prcsel$O $@
#
#       --- q --
#
$(OD)/qmply1$O : qmply1.f
	$(F90) /O3 /Qip  /c qmply1.f
	$(MVC) qmply1$O $@
#
#       --- r --
#
$(OD)/read_damage$O : read_damage.f $(OD)/mod_crack_growth$O \
                   $(OD)/mod_damage$O $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c read_damage.f
	$(MVC) read_damage$O $@

$(OD)/read_write$O : read_write.f
	$(F90) /O3 /Qip  /c read_write.f
	$(MVC) read_write$O $@

$(OD)/reopen$O : reopen.f param_def $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                 $(OD)/mod_damage$O $(OD)/mod_performance$O \
                 $(OD)/mod_elem_load$O param_def $(OD)/mod_hypre$O \
                 $(OD)/mod_main$O $(OD)/mod_mpc$O $(OD)/distributed_assembly$O\
                 $(OD)/mod_contact$O  \
                 $(OD)/mod_segmental_curves$O $(OD)/mod_crystals$O
	$(F90)  /$(PRE) /D$(OSNAME) /O3 /Qip  /c reopen.f
	$(MVC) reopen$O $@

$(OD)/rknifv$O : rknifv.f $(OD)/mod_main$O \
                   param_def include_sig_up \
                   $(OD)/mod_crack_growth$O $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_damage$O
	$(F90) /O3 /Qip  /c rknifv.f
	$(MVC) rknifv$O $@

$(OD)/rknmas$O : rknmas.f param_def
	$(F90) /O3 /Qip  /c rknmas.f
	$(MVC) rknmas$O $@

$(OD)/rknstr$O : rknstr.f param_def \
                   include_sig_up $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_main$O $(OD)/mod_crystals$O
	$(F90) /O3 /Qip  /c rknstr.f
	$(MVC) rknstr$O $@

$(OD)/rktstf$O : rktstf.f param_def include_tan_ek \
                 $(OD)/mod_main$O $(OD)/mod_crystals$O
	$(F90) /O3 /Qip  /c rktstf.f
	$(MVC) rktstf$O $@

$(OD)/rplstr$O : rplstr.f $(OD)/mod_main$O \
                   param_def include_sig_up \
                   $(OD)/mod_eleblocks$O $(OD)/mod_segmental_curves$O
	$(F90) /O3 /Qip  /c rplstr.f
	$(MVC) rplstr$O $@

$(OD)/rscmp1$O : rscmp1.f param_def
	$(F90) /O3 /Qip  /c rscmp1.f
	$(MVC) rscmp1$O $@

$(OD)/rstgp1$O : rstgp1.f param_def $(OD)/mod_crystals$O \
                   include_sig_up $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_main$O $(OD)/mod_main$O  $(OD)/mod_eleblocks$O
	$(F90) /O3 /Qip  /c rstgp1.f
	$(MVC) rstgp1$O $@
#
#       --- s --
#
$(OD)/scan$O : scan.f $(OD)/mod_file_info$O $(OD)/mod_scan$O \
                   $(OD)/mod_trlist$O 
	$(F90) /O3 /Qip  /c scan.f
	$(MVC) scan$O $@

$(OD)/scstr$O : scstr.f param_def
	$(F90) /O3 /Qip  /c scstr.f
	$(MVC) scstr$O $@

$(OD)/setelb$O : setelb.f
	$(F90) /O3 /Qip  /c setelb.f
	$(MVC) setelb$O $@

$(OD)/setup$O : setup.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c setup.f
	$(MVC) setup$O $@

$(OD)/setup_mat_props$O : setup_mat_props.f param_def \
                   $(OD)/mod_segmental_curves$O $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c setup_mat_props.f
	$(MVC) setup_mat_props$O $@

$(OD)/shapef$O : shapef.f
	$(F90) /O3 /Qip  /c shapef.f
	$(MVC) shapef$O $@

$(OD)/splunj$O : splunj.f
	$(F90) /O3 /Qip  /c splunj.f
	$(MVC) splunj$O $@

$(OD)/star_com$O : star_com.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c star_com.f
	$(MVC) star_com$O $@

$(OD)/statistics$O : statistics.f
	$(F90) /O3 /Qip  /c statistics.f
	$(MVC) statistics$O $@

$(OD)/steptime$O : steptime.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c steptime.f
	$(MVC) steptime$O $@

$(OD)/store$O : store.f param_def $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                   $(OD)/mod_crack_growth$O $(OD)/mod_performance$O  \
                   $(OD)/mod_damage$O $(OD)/mod_contact$O \
                   $(OD)/mod_elem_load$O $(OD)/mod_crystals$O \
                   $(OD)/mod_main$O $(OD)/distributed_assembly$O \
                   $(OD)/mod_hypre$O \
                   $(OD)/mod_segmental_curves$O $(OD)/mod_mpc$O
	$(F90) /$(PRE) /D$(OSNAME) /O3 /Qip  /c store.f
	$(MVC) store$O $@

$(OD)/stpdrv$O : stpdrv.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_damage$O \
                   $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c stpdrv.f
	$(MVC) stpdrv$O $@
#
#       --- t --
#
$(OD)/tanstf$O : tanstf.f $(OD)/mod_eleblocks$O $(OD)/mod_segmental_curves$O \
                   $(OD)/mod_crack_growth$O include_tan_ek \
                   $(OD)/mod_damage$O $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_mpi_lnpcg$O
	$(F90) /O3 /Qip  /c tanstf.f
	$(MVC) tanstf$O $@

$(OD)/temsto$O : temsto.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c temsto.f
	$(MVC) temsto$O $@

$(OD)/thyme$O : thyme.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c thyme.f
	$(MVC) thyme$O $@

$(OD)/tied_mesh_a$O : tied_mesh_a.f param_def \
                   $(OD)/mod_mpc$O
	$(F90) /O3 /Qip  /c tied_mesh_a.f
	$(MVC) tied_mesh_a$O $@

$(OD)/tied_mesh_b$O : tied_mesh_b.f param_def \
                   $(OD)/mod_mpc$O
	$(F90) /O3 /Qip  /c tied_mesh_b.f
	$(MVC) tied_mesh_b$O $@

$(OD)/tied_mesh_c$O : tied_mesh_c.f param_def \
                   $(OD)/mod_mpc$O
	$(F90) /O3 /Qip  /c tied_mesh_c.f
	$(MVC) tied_mesh_c$O $@

$(OD)/tied_mesh$O : tied_mesh_c.f param_def \
                   $(OD)/mod_mpc$O
	$(F90) /O3 /Qip  /c tied_mesh_c.f
	$(MVC) tied_mesh_c$O $@

$(OD)/tilde$O : tilde.f
	$(F90) /O3 /Qip  /c tilde.f
	$(MVC) tilde$O $@

$(OD)/trnmtx$O : trnmtx.f param_def
	$(F90) /O3 /Qip  /c trnmtx.f
	$(MVC) trnmtx$O $@

$(OD)/trnvec$O : trnvec.f param_def
	$(F90) /O3 /Qip  /c trnvec.f
	$(MVC) trnvec$O $@
#
#       --- u --
#
$(OD)/update$O : update.f $(OD)/mod_main$O \
                   param_def $(OD)/mod_main$O \
                   $(OD)/mod_eleblocks$O
	$(F90) /O3 /Qip  /c update.f
	$(MVC) update$O $@

$(OD)/user_list$O : user_list.f $(OD)/mod_main$O \
                  param_def $(OD)/mod_main$O $(OD)/mod_trlist$O
	$(F90) /O3 /Qip  /c user_list.f
	$(MVC) user_list$O $@

$(OD)/uppbar$O : uppbar.f $(OD)/mod_main$O \
                   param_def
	$(F90) /O3 /Qip  /c uppbar.f
	$(MVC) uppbar$O $@

$(OD)/upres$O : upres.f $(OD)/mod_main$O \
                   $(OD)/mod_contact$O param_def \
                   $(OD)/mod_mpc$O $(OD)/mod_stiffness$O
	$(F90) /O3 /Qip  /c upres.f
	$(MVC) upres$O $@

#
#       ---  Abaqus compatible user routines ------
#
$(OD)/user_routines_umat$O : user_routines_umat.f $(OD)/user_routines_module$O
	$(F90) /O3 /Qip /Ob1 /c user_routines_umat.f
	$(MVC) user_routines_umat$O $@

$(OD)/user_routines_other_Abaqus$O : user_routines_other_Abaqus.f  \
                                     $(OD)/user_routines_module$O
	$(F90) /O3 /Qip /heap-arrays /c user_routines_other_Abaqus.f
	$(MVC) user_routines_other_Abaqus$O $@

$(OD)/user_routines_warp3d$O : user_routines_warp3d.f  include_usr_parm \
                               $(OD)/user_routines_module$O
	$(F90) /O3 /Qip /heap-arrays /c user_routines_warp3d.f
	$(MVC) user_routines_warp3d$O $@

$(OD)/user_routines_support$O : user_routines_support.f  include_usr_parm \
                                $(OD)/user_routines_module$O
	$(F90) /O3 /Qip /c user_routines_support.f
	$(MVC) user_routines_support$O $@

#
#       --- v --
#
$(OD)/vol_avg$O : vol_avg.f
	$(F90) /O3 /Qip  /c vol_avg.f
	$(MVC) vol_avg$O $@

$(OD)/vol_terms$O : vol_terms.f
	$(F90) /O3 /Qip  /c vol_terms.f
	$(MVC) vol_terms$O $@
#
#       --- w --
#
#       --- y --
#
#       --- z --
#
$(OD)/zero_vector$O : zero_vector.f
	$(F90) /O3 /Qip  /c zero_vector.f
	$(MVC) zero_vector$O $@

$(OD)/zero_vol$O : zero_vol.f
	$(F90) /O3 /Qip  /c zero_vol.f
	$(MVC) zero_vol$O $@
#
#    ------   all module files -------------------------
#
$(ODIR)/mod_adaptive_steps$O : mod_adaptive_steps.f
	$(F90) /O3 /Qip  /c mod_adaptive_steps.f
	$(MVC) mod_adaptive_steps$O $@

$(ODIR)/mod_contact$O : mod_contact.f
	$(F90) /O3 /Qip  /c mod_contact.f
	$(MVC) mod_contact$O $@

$(ODIR)/mod_crack_growth$O : mod_crack_growth.f param_def  \
                             $(OD)/mod_main$O $(OD)/mod_eleblocks$O \
                             $(OD)/mod_damage$O
	$(F90) /O3 /Qip  /c mod_crack_growth.f
	$(MVC) mod_crack_growth$O $@

$(ODIR)/mod_crystals$O : mod_crystals.f param_def \
                         $(OD)/mod_main$O $(OD)/mod_main$O
	$(F90) /O3 /Qip  /c mod_crystals.f
	$(MVC) mod_crystals$O $@

$(ODIR)/mod_damage$O : mod_damage.f
	$(F90) /O3 /Qip  /c mod_damage.f
	$(MVC) mod_damage$O $@

$(ODIR)/mod_elblk$O : mod_elblk.f param_def
	$(F90) /O3 /Qip  /c mod_elblk.f
	$(MVC) mod_elblk$O $@

$(ODIR)/mod_eleblocks$O : mod_eleblocks.f param_def
	$(F90) /O3 /Qip  /c mod_eleblocks.f
	$(MVC) mod_eleblocks$O $@

$(ODIR)/mod_elem_load$O : mod_elem_load.f param_def
	$(F90) /O3 /Qip  /c mod_elem_load.f
	$(MVC) mod_elem_load$O $@

$(ODIR)/mod_file_info$O : mod_file_info.f
	$(F90) /O3 /Qip  /c mod_file_info.f
	$(MVC) mod_file_info$O $@

$(ODIR)/mod_hypre$O : mod_hypre.f \
		                $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip /c mod_hypre.f
	$(MVC) mod_hypre$O $@

$(ODIR)/mod_jintegral$O : mod_jintegral.f param_def
	$(F90) /Od /Qip  /c mod_jintegral.f
	$(MVC) mod_jintegral$O $@

$(ODIR)/mod_local_stiffness$O : mod_local_stiffness.f \
		                              $(OD)/mod_main$O param_def
	$(F90) /O3 /Qip /c mod_local_stiffness.f
	$(MVC) mod_local_stiffness$O $@

$(ODIR)/mod_main$O : mod_main.f param_def
	$(F90) /O3 /Qip  /c mod_main.f
	$(MVC) mod_main$O $@

$(ODIR)/mod_mpc$O : mod_mpc.f param_def
	$(F90) /O3 /Qip  /c mod_mpc.f
	$(MVC) mod_mpc$O $@

$(ODIR)/mod_mpi_lnpcg$O : mod_mpi_lnpcg.f param_def
	$(F90) /O3 /Qip  /c mod_mpi_lnpcg.f
	$(MVC) mod_mpi_lnpcg$O $@

$(ODIR)/mod_pconvert$O : mod_pconvert.f
	$(F90) /O3 /Qip  /c mod_pconvert.f
	$(MVC) mod_pconvert$O $@

$(ODIR)/mod_performance$O : mod_performance.f
	$(F90) /O3 /Qip /c mod_performance.f
	$(MVC) mod_performance$O $@

$(ODIR)/mod_scan$O : mod_scan.f
	$(F90) /O3 /Qip /c mod_scan.f
	$(MVC) mod_scan$O $@

$(ODIR)/mod_segmental_curves$O : mod_segmental_curves.f param_def
	$(F90) /O3 /Qip  /c mod_segmental_curves.f
	$(MVC) mod_segmental_curves$O $@

$(ODIR)/mod_stiffness$O : mod_stiffness.f param_def
	$(F90) /O3 /Qip  /c mod_stiffness.f
	$(MVC) mod_stiffness$O $@

$(ODIR)/mod_trlist$O : mod_trlist.f param_def $(OD)/mod_main$O \
		                              $(OD)/mod_scan$O 
	$(F90) /O3 /Qip  /c mod_trlist.f
	$(MVC) mod_trlist$O $@

$(ODIR)/user_routines_module$O : user_routines_module.f
	$(F90) /O3 /Qip  /c user_routines_module.f
	$(MVC) user_routines_module$O $@
